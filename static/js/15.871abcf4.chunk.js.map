{"version":3,"sources":["views/app-views/main/clients/users-list/index.js"],"names":["tableColumns","title","dataIndex","render","info","className","Text","strong","name","type","username","sorter","compare","a","b","toLowerCase","contacts","email","phone","Link","website","address","city","street","company","catchPhrase","_","user","to","APP_PREFIX_PATH","key","icon","size","mapDispatchToProps","getUsers","connect","users","loading","usersList","props","useState","usersToRender","setUsersToRender","useEffect","data","map","id","cover","bodyStyle","columns","dataSource","rowKey"],"mappings":"oOAmBMA,EAAgB,CACd,CACIC,MAAO,uCACPC,UAAW,OACXC,OAAQ,SAACC,GAAD,OACJ,sBAAKC,UAAU,qBAAf,UACI,cAAC,IAAWC,KAAZ,CAAiBC,QAAM,EAAvB,SAAyBH,EAAKI,OAC9B,cAAC,IAAWF,KAAZ,CAAiBG,KAAK,YAAtB,SAAmCL,EAAKM,eAGhDC,OAAQ,CACJC,QAAS,SAACC,EAAGC,GAGT,OAFAD,EAAIA,EAAET,KAAKI,KAAKO,gBAChBD,EAAIA,EAAEV,KAAKI,KAAKO,gBACA,EAAID,EAAID,EAAI,EAAI,KAI5C,CACIZ,MAAO,mDACPC,UAAW,WACXC,OAAQ,SAACa,GAAD,OAAe,sBAAKX,UAAU,qBAAf,UACf,cAAC,IAAWC,KAAZ,CAAiBC,QAAM,EAAvB,SAAyBS,EAASC,QAClC,cAAC,IAAWX,KAAZ,CAAiBG,KAAK,YAAtB,SAAmCO,EAASE,QAC5C,cAAC,IAAWC,KAAZ,UAAkBH,EAASI,eAIvC,CACInB,MAAO,iCACPC,UAAW,UACXC,OAAQ,SAACkB,GAAD,OAAc,sBAAKhB,UAAU,qBAAf,UACd,cAAC,IAAWC,KAAZ,CAAiBC,QAAM,EAAvB,SAAyBc,EAAQC,OACjC,cAAC,IAAWhB,KAAZ,CAAiBG,KAAK,YAAtB,SAAmCY,EAAQE,aAGnDZ,OAAQ,CACJC,QAAS,SAACC,EAAGC,GAGT,OAFAD,EAAIA,EAAEQ,QAAQC,KAAKP,gBACnBD,EAAIA,EAAEO,QAAQC,KAAKP,gBACH,EAAID,EAAID,EAAI,EAAI,KAI5C,CACIZ,MAAO,mDACPC,UAAW,UACXC,OAAQ,SAACqB,GAAD,OAAc,sBAAKnB,UAAU,qBAAf,UACd,cAAC,IAAWC,KAAZ,CAAiBC,QAAM,EAAvB,SAAyBiB,EAAQhB,OACjC,cAAC,IAAWF,KAAZ,CAAiBG,KAAK,YAAtB,SAAmCe,EAAQC,kBAGnDd,OAAQ,CACJC,QAAS,SAACC,EAAGC,GAGT,OAFAD,EAAIA,EAAEW,QAAQhB,KAAKO,gBACnBD,EAAIA,EAAEU,QAAQhB,KAAKO,gBACH,EAAID,EAAID,EAAI,EAAI,KAI5C,CACIZ,MAAO,GACPC,UAAW,UACXC,OAAQ,SAACuB,EAAGC,GAAJ,OACJ,qBAAKtB,UAAU,YAAf,SACI,cAAC,IAAD,CAASJ,MAAM,4HAAf,SACI,cAAC,IAAD,CAAM2B,GAAE,UAAKC,IAAL,mCAA+CF,EAAKG,KAA5D,SACI,cAAC,IAAD,CAAQrB,KAAK,UACLJ,UAAU,OACV0B,KAAM,cAAC,IAAD,IACNC,KAAK,mBAwCnCC,EAAqB,CACvBC,cAGWC,uBATS,SAAC,GAAa,IAAZC,EAAW,EAAXA,MAEtB,MAAO,CAACC,QADqBD,EAAtBC,QACUC,UADYF,EAAbE,aAQoBL,EAAzBE,EAlCG,SAACI,GAAW,IACnBF,EAAgCE,EAAhCF,QAASC,EAAuBC,EAAvBD,UAAWJ,EAAYK,EAAZL,SADF,EAEiBM,mBAAS,IAF1B,mBAElBC,EAFkB,KAEHC,EAFG,KAYzB,OARAC,qBAAU,WACNT,MACF,CAACA,IAEHS,qBAAU,WAlGgB,IAACC,EAmGvBN,GAAaI,EAlGjB,QAD2BE,EAmG6BN,SAlGxD,IAAOM,OAAP,EAAOA,EAAMC,KAAI,SAAAlB,GAAI,MAAK,CACtBG,IAAKH,EAAKmB,GACV1C,KAAM,CAACI,KAAMmB,EAAKnB,KAAME,SAAUiB,EAAKjB,UACvCM,SAAU,CAACC,MAAOU,EAAKV,MAAOC,MAAOS,EAAKT,MAAOE,QAASO,EAAKP,SAC/DC,QAASM,EAAKN,QACdG,QAASG,EAAKH,eA8FhB,CAACc,IAECD,EAAgB,cAAC,IAAD,CAASU,MAAO,YAGhC,cAAC,IAAD,CAAMC,UAAW,CAAC,QAAW,OAA7B,SACI,cAAC,IAAD,CACIC,QAASjD,EACTkD,WAAYT,EACZU,OAAQ","file":"static/js/15.871abcf4.chunk.js","sourcesContent":["import React, { useEffect, useState} from 'react'\r\nimport {Card, Table, Tooltip, Button, Typography} from 'antd';\r\nimport {EditOutlined} from '@ant-design/icons';\r\nimport {getUsers} from \"../../../../../redux/actions/Users\";\r\nimport {connect} from \"react-redux\";\r\nimport Loading from \"../../../../../components/shared-components/Loading\";\r\nimport {Link} from \"react-router-dom\";\r\nimport {APP_PREFIX_PATH} from \"../../../../../configs/AppConfig\";\r\n\r\nconst getFormattedTableData = (data) => {\r\n    return data?.map(user => ({\r\n        key: user.id,\r\n        info: {name: user.name, username: user.username},\r\n        contacts: {email: user.email, phone: user.phone, website: user.website},\r\n        address: user.address,\r\n        company: user.company,\r\n    }))\r\n}\r\n\r\nconst tableColumns =  [\r\n        {\r\n            title: 'Клиент',\r\n            dataIndex: 'info',\r\n            render: (info) => (\r\n                <div className=\"d-flex flex-column\">\r\n                    <Typography.Text strong>{info.name}</Typography.Text>\r\n                    <Typography.Text type=\"secondary\">{info.username}</Typography.Text>\r\n                </div>\r\n            ),\r\n            sorter: {\r\n                compare: (a, b) => {\r\n                    a = a.info.name.toLowerCase();\r\n                    b = b.info.name.toLowerCase();\r\n                    return a > b ? -1 : b > a ? 1 : 0;\r\n                },\r\n            },\r\n        },\r\n        {\r\n            title: 'Контакты',\r\n            dataIndex: 'contacts',\r\n            render: (contacts) => (<div className=\"d-flex flex-column\">\r\n                    <Typography.Text strong>{contacts.email}</Typography.Text>\r\n                    <Typography.Text type=\"secondary\">{contacts.phone}</Typography.Text>\r\n                    <Typography.Link>{contacts.website}</Typography.Link>\r\n                </div>\r\n            )\r\n        },\r\n        {\r\n            title: 'Адрес',\r\n            dataIndex: 'address',\r\n            render: (address) => (<div className=\"d-flex flex-column\">\r\n                    <Typography.Text strong>{address.city}</Typography.Text>\r\n                    <Typography.Text type=\"secondary\">{address.street}</Typography.Text>\r\n                </div>\r\n            ),\r\n            sorter: {\r\n                compare: (a, b) => {\r\n                    a = a.address.city.toLowerCase();\r\n                    b = b.address.city.toLowerCase();\r\n                    return a > b ? -1 : b > a ? 1 : 0;\r\n                },\r\n            },\r\n        },\r\n        {\r\n            title: 'Компания',\r\n            dataIndex: 'company',\r\n            render: (company) => (<div className=\"d-flex flex-column\">\r\n                    <Typography.Text strong>{company.name}</Typography.Text>\r\n                    <Typography.Text type=\"secondary\">{company.catchPhrase}</Typography.Text>\r\n                </div>\r\n            ),\r\n            sorter: {\r\n                compare: (a, b) => {\r\n                    a = a.company.name.toLowerCase();\r\n                    b = b.company.name.toLowerCase();\r\n                    return a > b ? -1 : b > a ? 1 : 0;\r\n                },\r\n            },\r\n        },\r\n        {\r\n            title: '',\r\n            dataIndex: 'actions',\r\n            render: (_, user) => (\r\n                <div className=\"text-left\">\r\n                    <Tooltip title=\"Редактировать профиль\">\r\n                        <Link to={`${APP_PREFIX_PATH}/main/clients/edit-user/${user.key}`}>\r\n                            <Button type=\"primary\"\r\n                                    className=\"mr-2\"\r\n                                    icon={<EditOutlined/>}\r\n                                    size=\"small\"\r\n                            />\r\n                        </Link>\r\n                    </Tooltip>\r\n                </div>\r\n            )\r\n        }\r\n    ]\r\n\r\n\r\nconst UsersList = (props) => {\r\n    const {loading, usersList, getUsers} = props\r\n    const [usersToRender, setUsersToRender] = useState([])\r\n\r\n    useEffect(()=> {\r\n        getUsers()\r\n    },[getUsers])\r\n\r\n    useEffect(()=> {\r\n        usersList && setUsersToRender(getFormattedTableData(usersList))\r\n    },[usersList])\r\n\r\n    if (loading) return <Loading cover={'content'} />\r\n\r\n    return (\r\n        <Card bodyStyle={{'padding': '0px'}}>\r\n            <Table\r\n                columns={tableColumns}\r\n                dataSource={usersToRender}\r\n                rowKey={'key'}\r\n            />\r\n        </Card>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = ({users}) => {\r\n    const {loading, usersList} = users\r\n    return {loading, usersList}\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    getUsers\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(UsersList)"],"sourceRoot":""}